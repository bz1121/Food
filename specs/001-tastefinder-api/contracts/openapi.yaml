openapi: 3.0.3
info:
  title: TasteFinder API
  description: |
    TasteFinder 美食推荐平台 RESTful API 规范
    
    ## 认证方式
    使用 JWT Bearer Token 认证，在请求头中添加：
    ```
    Authorization: Bearer {token}
    ```
    
    ## 基础URL
    - 开发环境: http://localhost:8080/api
    - 生产环境: https://api.tastefinder.com/api
    
  version: 1.0.0
  contact:
    name: TasteFinder Team
    email: dev@tastefinder.com

servers:
  - url: http://localhost:8080/api
    description: 开发环境
  - url: https://api.tastefinder.com/api
    description: 生产环境

tags:
  - name: Authentication
    description: 用户认证相关接口
  - name: User
    description: 用户管理相关接口
  - name: Restaurant
    description: 餐厅相关接口（高德API代理）
  - name: Favorite
    description: 餐厅收藏相关接口
  - name: Review
    description: 餐厅评价相关接口
  - name: Navigation
    description: 路径规划相关接口

paths:
  # ==================== 认证接口 ====================
  /auth/register:
    post:
      tags:
        - Authentication
      summary: 用户注册
      description: 创建新用户账户（无需邮箱验证）
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                  pattern: '^[a-zA-Z0-9_]+$'
                  description: 用户名（字母数字下划线）
                  example: foodlover123
                password:
                  type: string
                  minLength: 8
                  maxLength: 50
                  description: 密码（至少8字符，包含字母和数字）
                  example: Password123
                nickname:
                  type: string
                  maxLength: 100
                  description: 昵称（可选）
                  example: 美食爱好者
      responses:
        '201':
          description: 注册成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: 用户名已存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: 用户登录
      description: 使用用户名和密码登录，返回JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: foodlover123
                password:
                  type: string
                  format: password
                  example: Password123
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: 用户名或密码错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ==================== 用户接口 ====================
  /user/profile:
    get:
      tags:
        - User
      summary: 获取当前用户信息
      security:
        - BearerAuth: []
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: 未授权
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ==================== 餐厅接口 ====================
  /restaurants/search:
    get:
      tags:
        - Restaurant
      summary: 搜索附近餐厅
      description: 基于用户位置搜索附近餐厅（调用高德POI API）
      security:
        - BearerAuth: []
      parameters:
        - name: latitude
          in: query
          required: true
          schema:
            type: number
            format: double
          description: 纬度
          example: 39.908823
        - name: longitude
          in: query
          required: true
          schema:
            type: number
            format: double
          description: 经度
          example: 116.397470
        - name: radius
          in: query
          schema:
            type: integer
            default: 5000
            minimum: 1000
            maximum: 10000
          description: 搜索半径（米），默认5000米
        - name: keyword
          in: query
          schema:
            type: string
          description: 搜索关键词（餐厅名、菜系）
          example: 火锅
        - name: category
          in: query
          schema:
            type: string
          description: 餐厅类型
          example: 中餐厅
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [distance, rating, price]
            default: distance
          description: 排序方式
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: 页码
        - name: size
          in: query
          schema:
            type: integer
            default: 20
            maximum: 50
          description: 每页数量
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Restaurant'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /restaurants/{poiId}:
    get:
      tags:
        - Restaurant
      summary: 获取餐厅详情
      description: 根据高德POI ID获取餐厅详细信息
      security:
        - BearerAuth: []
      parameters:
        - name: poiId
          in: path
          required: true
          schema:
            type: string
          description: 高德POI ID
          example: B001B0I32K
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantDetail'
        '404':
          description: 餐厅不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ==================== 收藏接口 ====================
  /favorites:
    get:
      tags:
        - Favorite
      summary: 获取收藏列表
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            default: 20
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [time, distance]
            default: time
          description: 排序方式（time=收藏时间, distance=距离当前位置）
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Favorite'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

    post:
      tags:
        - Favorite
      summary: 添加收藏
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - poiId
              properties:
                poiId:
                  type: string
                  description: 高德POI ID
                  example: B001B0I32K
                notes:
                  type: string
                  maxLength: 500
                  description: 用户备注
                  example: 这家火锅很好吃！
      responses:
        '201':
          description: 收藏成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Favorite'
        '409':
          description: 已收藏过该餐厅
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /favorites/{favoriteId}:
    delete:
      tags:
        - Favorite
      summary: 取消收藏
      security:
        - BearerAuth: []
      parameters:
        - name: favoriteId
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: 收藏ID
      responses:
        '204':
          description: 删除成功
        '404':
          description: 收藏不存在
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ==================== 评价接口 ====================
  /reviews:
    get:
      tags:
        - Review
      summary: 获取餐厅评价列表
      security:
        - BearerAuth: []
      parameters:
        - name: poiId
          in: query
          required: true
          schema:
            type: string
          description: 餐厅POI ID
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            default: 10
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [time, rating, helpful]
            default: time
          description: 排序方式
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  summary:
                    $ref: '#/components/schemas/ReviewSummary'

    post:
      tags:
        - Review
      summary: 发表评价
      description: 用户发表餐厅评价（先发后审）
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - poiId
                - restaurantName
                - rating
                - content
              properties:
                poiId:
                  type: string
                  description: 餐厅POI ID
                restaurantName:
                  type: string
                  description: 餐厅名称
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  description: 星级评分
                content:
                  type: string
                  minLength: 200
                  maxLength: 2000
                  description: 评价内容
                images:
                  type: array
                  maxItems: 9
                  items:
                    type: string
                    format: uri
                  description: 图片URL列表（最多9张）
      responses:
        '201':
          description: 发布成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: 请求参数错误或包含敏感词
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reviews/{reviewId}:
    put:
      tags:
        - Review
      summary: 编辑评价
      security:
        - BearerAuth: []
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                content:
                  type: string
                  minLength: 200
                  maxLength: 2000
                images:
                  type: array
                  maxItems: 9
                  items:
                    type: string
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '403':
          description: 无权限编辑他人评价
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Review
      summary: 删除评价
      security:
        - BearerAuth: []
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 删除成功
        '403':
          description: 无权限删除他人评价
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reviews/{reviewId}/images:
    post:
      tags:
        - Review
      summary: 上传评价图片
      security:
        - BearerAuth: []
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: 图片文件（最大5MB，支持jpg/png）
      responses:
        '201':
          description: 上传成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  imageUrl:
                    type: string
                    format: uri
                    example: https://cdn.example.com/images/123456.jpg

  # ==================== 导航接口 ====================
  /navigation/route:
    get:
      tags:
        - Navigation
      summary: 获取路径规划
      description: 计算从起点到终点的导航路径
      security:
        - BearerAuth: []
      parameters:
        - name: originLat
          in: query
          required: true
          schema:
            type: number
          description: 起点纬度
        - name: originLon
          in: query
          required: true
          schema:
            type: number
          description: 起点经度
        - name: destLat
          in: query
          required: true
          schema:
            type: number
          description: 终点纬度
        - name: destLon
          in: query
          required: true
          schema:
            type: number
          description: 终点经度
        - name: travelMode
          in: query
          schema:
            type: string
            enum: [driving, walking, transit]
            default: driving
          description: 出行方式
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NavigationRoute'

# ==================== 数据模型定义 ====================
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # 认证响应
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token
          example: eyJhbGciOiJIUzI1NiIs...
        user:
          $ref: '#/components/schemas/UserProfile'

    # 用户信息
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: foodlover123
        nickname:
          type: string
          example: 美食爱好者
        avatarUrl:
          type: string
          format: uri
          example: https://cdn.example.com/avatar/123.jpg
        roleType:
          type: string
          enum: [NORMAL_USER, FOOD_CRITIC_A, FOOD_CRITIC_B, SENIOR_FOODIE, MERCHANT]
          example: NORMAL_USER
        createdAt:
          type: string
          format: date-time
          example: "2025-10-14T10:30:00Z"

    # 餐厅信息
    Restaurant:
      type: object
      properties:
        poiId:
          type: string
          description: 高德POI ID
          example: B001B0I32K
        name:
          type: string
          example: 海底捞火锅
        address:
          type: string
          example: 北京市朝阳区建国路88号
        location:
          type: object
          properties:
            latitude:
              type: number
              example: 39.908823
            longitude:
              type: number
              example: 116.397470
        distance:
          type: number
          description: 距离当前位置（米）
          example: 1250.5
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 5
          example: 4.5
        category:
          type: string
          example: 火锅店
        priceRange:
          type: string
          example: $$
        phone:
          type: string
          example: 010-12345678
        images:
          type: array
          items:
            type: string
            format: uri

    # 餐厅详情
    RestaurantDetail:
      allOf:
        - $ref: '#/components/schemas/Restaurant'
        - type: object
          properties:
            openingHours:
              type: string
              example: "10:00-22:00"
            tags:
              type: array
              items:
                type: string
              example: ["火锅", "川菜", "聚餐"]
            avgPrice:
              type: integer
              description: 人均消费
              example: 120
            reviewCount:
              type: integer
              example: 1580
            isFavorited:
              type: boolean
              description: 当前用户是否已收藏
              example: false

    # 收藏
    Favorite:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        poiId:
          type: string
          example: B001B0I32K
        restaurantName:
          type: string
          example: 海底捞火锅
        address:
          type: string
          example: 北京市朝阳区建国路88号
        location:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number
        rating:
          type: number
          example: 4.5
        coverImage:
          type: string
          format: uri
        notes:
          type: string
          example: 这家火锅很好吃！
        createdAt:
          type: string
          format: date-time

    # 评价
    Review:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        user:
          type: object
          properties:
            id:
              type: integer
              format: int64
            username:
              type: string
            nickname:
              type: string
            avatarUrl:
              type: string
            isCertified:
              type: boolean
              description: 是否认证评论家
        rating:
          type: integer
          minimum: 1
          maximum: 5
          example: 5
        content:
          type: string
          example: 味道很好，环境干净，服务态度好...
        images:
          type: array
          items:
            type: string
            format: uri
        helpfulCount:
          type: integer
          example: 25
        createdAt:
          type: string
          format: date-time

    # 评价汇总
    ReviewSummary:
      type: object
      properties:
        totalCount:
          type: integer
          example: 1580
        averageRating:
          type: number
          example: 4.3
        ratingDistribution:
          type: object
          properties:
            '5':
              type: integer
              example: 800
            '4':
              type: integer
              example: 500
            '3':
              type: integer
              example: 200
            '2':
              type: integer
              example: 50
            '1':
              type: integer
              example: 30

    # 导航路径
    NavigationRoute:
      type: object
      properties:
        distance:
          type: number
          description: 总距离（米）
          example: 5280.5
        duration:
          type: integer
          description: 预计时长（秒）
          example: 1200
        travelMode:
          type: string
          example: driving
        polyline:
          type: string
          description: 路径坐标串（编码）
          example: "_p~iF~ps|U_ulLn..."
        steps:
          type: array
          items:
            type: object
            properties:
              instruction:
                type: string
                example: "沿建国路向东行驶500米"
              distance:
                type: number
              duration:
                type: integer

    # 分页信息
    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        size:
          type: integer
          example: 20
        total:
          type: integer
          example: 150
        totalPages:
          type: integer
          example: 8

    # 错误响应
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: VALIDATION_ERROR
        message:
          type: string
          example: 用户名已存在
        timestamp:
          type: string
          format: date-time
        path:
          type: string
          example: /api/auth/register

